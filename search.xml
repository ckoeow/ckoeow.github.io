<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>P11233 [CSP-S 2024] 染色</title>
    <url>/2024/11/10/P11233%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p11233"><a class="markdownIt-Anchor" href="#p11233"></a> P11233</h1>
<p><a href="https://www.luogu.com.cn/problem/P11233">题目传送门</a></p>
<p>动态规划题。设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">f_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示考虑前i位的贡献。当第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>位没有贡献时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>i</mi></msub><mo>=</mo><msub><mi>f</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">f_i=f_{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>，接下来考虑做出贡献的时候。</p>

{ {
令$pre_{a_i}$表示第$i$位前$a_i$上一次出现的位置，$pre$数组可在递推的时候动态更新。显然当$i$和$pre_{a_i}$染成相同颜色的时候贡献最大。若不选$pre_{a_i}$而选更靠前的，则可将$pre_{a_i}$也染成同色使贡献更大。则转移方程便容易得出：
$$
f_i=max(f_i,f_{pre_{a_i}+1}+a_i+\sum_{j=pre_{{a_i}+1}}^i [a_i=a_{i-1}]\times a[i])
$$

其中求和部分可用前缀和优化。

ps:$f_{pre_{a_i}+1}$中需要+1是因为需要考虑$pre_{a_i}+1$和前面的贡献。} }

<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i, a, b) for (int i = a; i &lt;= b; ++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> drep(i, a, b) for (int i = a; i &gt;= b; --i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pln putchar(<span class="hljs-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> psp putchar(<span class="hljs-string">&#x27; &#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rd read()</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">bool</span> f = <span class="hljs-number">0</span>; <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>	<span class="hljs-keyword">for</span> (; ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>()) <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">for</span> (; ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>()) x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>;<br>	<span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">static</span> <span class="hljs-type">int</span> stkk[<span class="hljs-number">43</span>], tpp = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>	<span class="hljs-keyword">do</span><br>	&#123;<br>		stkk[++tpp] = x % <span class="hljs-number">10</span>;<br>		x /= <span class="hljs-number">10</span>;<br>	&#125; <span class="hljs-keyword">while</span> (x);<br>	<span class="hljs-keyword">while</span> (tpp) <span class="hljs-built_in">putchar</span>(stkk[tpp --] + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 1000005</span><br><br><span class="hljs-type">int</span> f[N], n, a[N], s[N], pre[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">memset</span>(pre, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> pre);<br>	<span class="hljs-built_in">memset</span>(s, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> s);<br>	<span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> f);<br>	n = rd;<br>	<span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n) a[i] = rd;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solv</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">rep</span>(i, <span class="hljs-number">2</span>, n) s[i] = ((a[i] == a[i - <span class="hljs-number">1</span>]) ? a[i] : <span class="hljs-number">0</span>) + s[i<span class="hljs-number">-1</span>];<br>	<span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n)<br>	&#123;<br>		f[i] = f[i<span class="hljs-number">-1</span>];<br>		<span class="hljs-keyword">if</span> (pre[a[i]])<br>		&#123;<br>			<span class="hljs-type">int</span> l = pre[a[i]];<br>			f[i] = <span class="hljs-built_in">max</span>(f[i], f[l<span class="hljs-number">+1</span>] + a[i] + s[i<span class="hljs-number">-1</span>] - s[l]);<br>		&#125;<br>		pre[a[i]] = i;<br>	&#125;<br>	cout &lt;&lt; f[n] &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//	freopen(&quot;.in&quot;, &quot;r&quot;, stdin);</span><br><span class="hljs-comment">//	freopen(&quot;.out&quot;, &quot;w&quot;, stdout);</span><br><span class="hljs-comment">//	ios::sync_with_stdio(false);</span><br><span class="hljs-comment">//	cin.tie(0), cout.tie(0);</span><br>	<span class="hljs-type">int</span> T = rd;<br>	<span class="hljs-keyword">while</span> (T --)<br>	&#123;<br>		<span class="hljs-built_in">init</span>();<br>		<span class="hljs-built_in">solv</span>();<br>	&#125;<br><span class="hljs-comment">//	fclose(stdin);</span><br><span class="hljs-comment">//	fclose(stdout);</span><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>P5304题解</title>
    <url>/2024/11/29/P5304%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p5304-gxoigzoi2019-旅行者-题解"><a class="markdownIt-Anchor" href="#p5304-gxoigzoi2019-旅行者-题解"></a> P5304 [GXOI/GZOI2019] 旅行者 题解</h1>
<p><a href="https://www.luogu.com.cn/problem/P5304">题目传送门</a></p>
<p>复述一下题意：给定n个点m条边的有向图，边有边权，给定k个特殊点，求k个点两两之间最短路的最小值。</p>
<p>题意挺好理解，第一想法自然是想暴力。对每个特殊点求单源最短路，然后取max即可，复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>自然不足以通过本题。于是想其他思路。</p>
<p>想到求k个特殊点和其他点之间的最短路的最小值可以建超级源点做单源最短路在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>内求解，于是考虑将这k个点分成两组，这两组之间的不同点两两最短路最小值即可求解。</p>
<p>接下来考虑如何分组，按照二进制分组自然可以，还有一种分组方式可以随机化分组（别看随机化听起来像乱搞，但是却挺有用的还）。每次随机找特殊点中的一部分和超级源点连边并求最短路最小值，多跑几遍随机的正确性就上去了。复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(knlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>（k为随机化的常数）。</p>
<p>AC代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;ll, ll&gt; pll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">double</span> dd;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IOS cin.tie(nullptr), cout.tie(nullptr)-&gt;sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i, a, b) for (int i = (a); i &lt;= (b); i ++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i, a, b) for (int i = (a); i &gt;= (b); i --)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mset(x, v) memset(x, v, sizeof x)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rd read<span class="hljs-string">&lt;ll&gt;</span>()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RAND() mt19937 Rand(time(0))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> gr(l, r) (Rand() % (r - l + 1) + l)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SZ(x) ((ll)x.size())</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Max</span><span class="hljs-params">(T &amp;x, T y)</span> </span>&#123; <span class="hljs-keyword">if</span> (y &gt; x) x = y; &#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Min</span><span class="hljs-params">(T &amp;x, T y)</span> </span>&#123; <span class="hljs-keyword">if</span> (y &lt; x) x = y; &#125;<br><br><span class="hljs-keyword">namespace</span> FastIO<br>&#123;<br>	<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function">T <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-type">bool</span> fl = <span class="hljs-number">0</span>; T x = <span class="hljs-number">0</span>; <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>		<span class="hljs-keyword">for</span> (; ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>()) <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) fl = <span class="hljs-number">1</span>;<br>		<span class="hljs-keyword">for</span> (; ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>()) x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>;<br>		<span class="hljs-keyword">return</span> fl ? -x : x;<br>	&#125;<br><br>	<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>		<span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">9</span>) <span class="hljs-built_in">write</span>(x / <span class="hljs-number">10</span>);<br>		<span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>	&#125;<br><br>	<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">writecs</span><span class="hljs-params">(T x)</span> </span>&#123; <span class="hljs-built_in">write</span>(x); <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>); &#125;<br>	<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">writeln</span><span class="hljs-params">(T x)</span> </span>&#123; <span class="hljs-built_in">write</span>(x); <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>); &#125;<br>&#125;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> FastIO;<br><br><span class="hljs-comment">/*-----------------------main-----------------------*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF ((ll)1e18)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 100005</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> M 500005</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">edge</span> &#123; ll to, nxt, cost; &#125; e[M], ee[M];<br>ll head[N], tot, hd[N], tt;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">adde</span><span class="hljs-params">(ll u, ll v, ll w = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>	e[++tot] = &#123;v, head[u], w&#125;;<br>	head[u] = tot;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ADD</span><span class="hljs-params">(ll u, ll v, ll w = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>	ee[++tt] = &#123;v, hd[u], w&#125;;<br>	hd[u] = tt;<br>&#125;<br><br>ll n, m, k;<br>ll a[N], dis[N];<br><span class="hljs-type">bool</span> vis[N], In[N];<br>vector&lt;ll&gt; s;<br>priority_queue&lt;pll&gt; q;<br><br><span class="hljs-function">ll <span class="hljs-title">dijk</span><span class="hljs-params">(ll st)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">mset</span>(vis, <span class="hljs-number">0</span>);<br>	<span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n) dis[i] = INF;<br>	<span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) q.<span class="hljs-built_in">pop</span>();<br>	q.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>, st&#125;);<br>	vis[st] = <span class="hljs-number">1</span>;<br>	dis[st] = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>	&#123;<br>		ll u = q.<span class="hljs-built_in">top</span>().se;<br>		q.<span class="hljs-built_in">pop</span>();<br>		<span class="hljs-keyword">for</span> (ll i = head[u]; ~i; i = e[i].nxt)<br>		&#123;<br>			ll v = e[i].to, w = e[i].cost;<br>			<span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + w)<br>			&#123;<br>				dis[v] = dis[u] + w;<br>				<span class="hljs-keyword">if</span> (!vis[v]) q.<span class="hljs-built_in">push</span>(&#123;-dis[v], v&#125;);<br>			&#125;<br>		&#125;<br>	&#125;<br>	ll tmp = INF;<br>	<span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, k)<br>	&#123;<br>		ll v = a[i];<br>		<span class="hljs-keyword">if</span> (!In[v] &amp;&amp; dis[v] &lt; tmp) tmp = dis[v];<br>	&#125;<br>	<span class="hljs-keyword">return</span> tmp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solv</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">RAND</span>();<br>	<span class="hljs-built_in">mset</span>(hd, <span class="hljs-number">-1</span>);<br>	tt = <span class="hljs-number">0</span>;<br>	n = rd, m = rd, k = rd;<br>	<span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, m)<br>	&#123;<br>		ll a = rd, b = rd, c = rd;<br>		<span class="hljs-built_in">ADD</span>(a, b, c);<br>	&#125;<br>	<span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, k) a[i] = rd;<br>	ll ans = INF;<br>	<span class="hljs-built_in">rep</span>(_, <span class="hljs-number">1</span>, <span class="hljs-number">15</span>)<br>	&#123;<br>		s.<span class="hljs-built_in">clear</span>();<br>		<span class="hljs-built_in">rep</span>(i, <span class="hljs-number">0</span>, n) head[i] = hd[i];<br>		tot = tt;<br>		<span class="hljs-built_in">rep</span>(i, <span class="hljs-number">0</span>, tt) e[i] = ee[i];<br>		<span class="hljs-built_in">rep</span>(i, <span class="hljs-number">0</span>, n) In[i] = <span class="hljs-number">0</span>;<br>		<span class="hljs-built_in">rep</span>(j, <span class="hljs-number">1</span>, k)<br>		&#123;<br>			ll i = a[j];<br>			<span class="hljs-keyword">if</span> (<span class="hljs-built_in">Rand</span>() % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123; In[i] = <span class="hljs-number">1</span>; s.<span class="hljs-built_in">pb</span>(i); <span class="hljs-built_in">adde</span>(<span class="hljs-number">0</span>, i, <span class="hljs-number">0</span>); &#125;<br>		&#125;<br>		<span class="hljs-built_in">Min</span>(ans, <span class="hljs-built_in">dijk</span>(<span class="hljs-number">0</span>));<br>	&#125;<br>	<span class="hljs-built_in">writeln</span>(ans);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">int</span> TC = rd;<br>	<span class="hljs-keyword">while</span> (TC --) <span class="hljs-built_in">solv</span>();<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>P2572题解</title>
    <url>/2025/01/20/P2572%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p2572-scoi2010-序列操作-题解"><a class="markdownIt-Anchor" href="#p2572-scoi2010-序列操作-题解"></a> P2572 [SCOI2010] 序列操作 题解</h1>
<p><a href="https://www.luogu.com.cn/problem/P2572">题目传送门</a></p>
<p>一个线段树比较板的题吧算是，考察的思维比较少，主要还是代码的实现能力。</p>
<p>看题。一眼线段树，区间赋值，区间取反，区间求和，区间连续最大。</p>
<p>于是想可以线段树维护区间的1的个数，最多的1的数量。但是只维护这些无法转移，于是为了转移最多的1的数量，还需再维护最长的前缀1和后缀1.</p>
<p>同理，因为有取反，所以同时维护0的如上信息，取反的时候将0和1的交换一下即可。</p>
<p>剩下的就是细节的问题了。求区间连续最大的时候不能直接将两个区间的连续取最大，还需像线段树的转移一样合并区间才可，详见AC代码的merge函数。在标记下传的时候需要考虑哪个的优先级高，这个倒是挺容易想：肯定是先传set再传reverse，因为set完还可reverse，但是reverse完set的话reverse的信息都被覆盖了。</p>
<p>另外这里还有魔鬼细节：下标从0开始，习惯了写从1开始的话在读入的时候加上一就可以。</p>
<p>最后就是别忘了pushdown！</p>
<p>AC代码如下：</p>
<pre class="highlight"><code class="c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;

<span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;
<span class="hljs-keyword">typedef</span> pair&lt;ll, ll&gt; pll;
<span class="hljs-keyword">typedef</span> <span class="hljs-type">double</span> dd;

<span class="hljs-meta">#<span class="hljs-keyword">define</span> IOS cin.tie(nullptr), cout.tie(nullptr)-&gt;sync_with_stdio(false)</span>
<span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i, a, b) for (int i = (a); i &lt;= (b); i ++)</span>
<span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i, a, b) for (int i = (a); i &gt;= (b); i --)</span>
<span class="hljs-meta">#<span class="hljs-keyword">define</span> mset(x, v) memset(x, v, sizeof x)</span>
<span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span>
<span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span>
<span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span>
<span class="hljs-meta">#<span class="hljs-keyword">define</span> rd read<span class="hljs-string">&lt;ll&gt;</span>()</span>
<span class="hljs-meta">#<span class="hljs-keyword">define</span> RAND() mt19937 Rand(time(0))</span>
<span class="hljs-meta">#<span class="hljs-keyword">define</span> gr(l, r) (Rand() % (r - l + 1) + l)</span>
<span class="hljs-meta">#<span class="hljs-keyword">define</span> SZ(x) ((ll)x.size())</span>

<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Max</span><span class="hljs-params">(T &amp;x, T y)</span> </span>&#123; <span class="hljs-keyword">if</span> (y &gt; x) x = y; &#125;
<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Min</span><span class="hljs-params">(T &amp;x, T y)</span> </span>&#123; <span class="hljs-keyword">if</span> (y &lt; x) x = y; &#125;

<span class="hljs-keyword">namespace</span> FastIO
&#123;
	<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function">T <span class="hljs-title">read</span><span class="hljs-params">()</span>
	</span>&#123;
		<span class="hljs-type">bool</span> fl = <span class="hljs-number">0</span>; T x = <span class="hljs-number">0</span>; <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();
		<span class="hljs-keyword">for</span> (; ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>()) <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) fl = <span class="hljs-number">1</span>;
		<span class="hljs-keyword">for</span> (; ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>()) x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>;
		<span class="hljs-keyword">return</span> fl ? -x : x;
	&#125;

	<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x)</span>
	</span>&#123;
		<span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;
		<span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">9</span>) <span class="hljs-built_in">write</span>(x / <span class="hljs-number">10</span>);
		<span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);
	&#125;

	<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">writecs</span><span class="hljs-params">(T x)</span> </span>&#123; <span class="hljs-built_in">write</span>(x); <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>); &#125;
	<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">writeln</span><span class="hljs-params">(T x)</span> </span>&#123; <span class="hljs-built_in">write</span>(x); <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>); &#125;
&#125;

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> FastIO;

<span class="hljs-comment">/*-----------------------main-----------------------*/</span>

<span class="hljs-meta">#<span class="hljs-keyword">define</span> <span class="hljs-keyword">line</span> cout &lt;&lt; <span class="hljs-string">&quot;-------------------\n&quot;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">define</span> N 100005</span>
<span class="hljs-meta">#<span class="hljs-keyword">define</span> lc p&lt;&lt;1</span>
<span class="hljs-meta">#<span class="hljs-keyword">define</span> rc p&lt;&lt;1|1</span>

<span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>
&#123;
	ll l, r;
	ll s0, s1, l0, l1;
	ll p0, p1, sf0, sf1;
	ll rev, st = <span class="hljs-number">-1</span>;
&#125; tr[N&lt;&lt;<span class="hljs-number">2</span>];

<span class="hljs-keyword">struct</span> <span class="hljs-title class_">Q</span>
&#123;
	ll l, r, l1, p1, sf1;
&#125;;

ll n, m, a[N];

<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(ll p)</span>
</span>&#123;
	node L = tr[lc], R = tr[rc], nw = tr[p];
	nw.s0 = L.s0 + R.s0;
	nw.s1 = L.s1 + R.s1;
	nw.l0 = <span class="hljs-built_in">max</span>(&#123;L.l0, R.l0, L.sf0 + R.p0&#125;);
	nw.l1 = <span class="hljs-built_in">max</span>(&#123;L.l1, R.l1, L.sf1 + R.p1&#125;);
	nw.p0 = (L.p0 == (L.r - L.l + <span class="hljs-number">1</span>)) ? L.p0 + R.p0 : L.p0;
	nw.p1 = (L.p1 == (L.r - L.l + <span class="hljs-number">1</span>)) ? L.p1 + R.p1 : L.p1;
	nw.sf0 = (R.sf0 == (R.r - R.l + <span class="hljs-number">1</span>)) ? R.sf0 + L.sf0 : R.sf0;
	nw.sf1 = (R.sf1 == (R.r - R.l + <span class="hljs-number">1</span>)) ? R.sf1 + L.sf1 : R.sf1;
	tr[p] = nw;
&#125;

<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(ll p, ll rev, ll st)</span>
</span>&#123;
	<span class="hljs-keyword">if</span> (rev)
	&#123;
		<span class="hljs-built_in">swap</span>(tr[p].s0, tr[p].s1); <span class="hljs-built_in">swap</span>(tr[p].l0, tr[p].l1);
		<span class="hljs-built_in">swap</span>(tr[p].p0, tr[p].p1); <span class="hljs-built_in">swap</span>(tr[p].sf0, tr[p].sf1);
	&#125;
	<span class="hljs-keyword">else</span>
	&#123;
		<span class="hljs-keyword">if</span> (st == <span class="hljs-number">0</span>)
		&#123;
			tr[p].s0 = tr[p].l0 = tr[p].p0 = tr[p].sf0 = tr[p].r - tr[p].l + <span class="hljs-number">1</span>;
			tr[p].s1 = tr[p].l1 = tr[p].p1 = tr[p].sf1 = <span class="hljs-number">0</span>;
		&#125;
		<span class="hljs-keyword">else</span>
		&#123;
			tr[p].s0 = tr[p].l0 = tr[p].p0 = tr[p].sf0 = <span class="hljs-number">0</span>;
			tr[p].s1 = tr[p].l1 = tr[p].p1 = tr[p].sf1 = tr[p].r - tr[p].l + <span class="hljs-number">1</span>;
		&#125;
	&#125;
&#125;

<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(ll p)</span>
</span>&#123;
	<span class="hljs-keyword">if</span> (tr[p].st != <span class="hljs-number">-1</span>)
	&#123;
		<span class="hljs-built_in">upd</span>(lc, <span class="hljs-number">0</span>, tr[p].st);
		<span class="hljs-built_in">upd</span>(rc, <span class="hljs-number">0</span>, tr[p].st);
		tr[lc].st = tr[rc].st = tr[p].st;
		tr[lc].rev = tr[rc].rev = <span class="hljs-number">0</span>;
		tr[p].st = <span class="hljs-number">-1</span>;
	&#125;
	<span class="hljs-keyword">if</span> (tr[p].rev)
	&#123;
		<span class="hljs-built_in">upd</span>(lc, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);
		<span class="hljs-built_in">upd</span>(rc, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);
		tr[lc].rev ^= <span class="hljs-number">1</span>;
		tr[rc].rev ^= <span class="hljs-number">1</span>;
		tr[p].rev = <span class="hljs-number">0</span>;
	&#125;
&#125;

<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(ll l, ll r, ll p)</span>
</span>&#123;
	tr[p].l = l;
	tr[p].r = r;
	<span class="hljs-keyword">if</span> (l == r)
	&#123;
		<span class="hljs-keyword">if</span> (a[l] == <span class="hljs-number">0</span>)
		&#123;
			tr[p].s0 = tr[p].l0 = tr[p].p0 = tr[p].sf0 = <span class="hljs-number">1</span>;
			tr[p].s1 = tr[p].l1 = tr[p].p1 = tr[p].sf1 = <span class="hljs-number">0</span>;
		&#125;
		<span class="hljs-keyword">else</span>
		&#123;
			tr[p].s0 = tr[p].l0 = tr[p].p0 = tr[p].sf0 = <span class="hljs-number">0</span>;
			tr[p].s1 = tr[p].l1 = tr[p].p1 = tr[p].sf1 = <span class="hljs-number">1</span>;
		&#125;
		<span class="hljs-keyword">return</span> ;
	&#125;
	ll mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;
	<span class="hljs-built_in">build</span>(l, mid, lc);
	<span class="hljs-built_in">build</span>(mid + <span class="hljs-number">1</span>, r, rc);
	<span class="hljs-built_in">pushup</span>(p);
&#125;

<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">assign</span><span class="hljs-params">(ll p, ll l, ll r, ll st)</span>
</span>&#123;
	<span class="hljs-keyword">if</span> (l &lt;= tr[p].l &amp;&amp; tr[p].r &lt;= r)
	&#123;
		<span class="hljs-built_in">upd</span>(p, <span class="hljs-number">0</span>, st);
		tr[p].rev = <span class="hljs-number">0</span>;
		tr[p].st = st;
		<span class="hljs-keyword">return</span> ;
	&#125;
	<span class="hljs-built_in">pushdown</span>(p);
	ll mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="hljs-number">1</span>;
	<span class="hljs-keyword">if</span> (l &lt;= mid) <span class="hljs-built_in">assign</span>(lc, l, r, st);
	<span class="hljs-keyword">if</span> (r &gt; mid) <span class="hljs-built_in">assign</span>(rc, l, r, st);
	<span class="hljs-built_in">pushup</span>(p);
&#125;

<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">(ll p, ll l, ll r)</span>
</span>&#123;
	<span class="hljs-keyword">if</span> (l &lt;= tr[p].l &amp;&amp; tr[p].r &lt;= r)
	&#123;
		<span class="hljs-built_in">upd</span>(p, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);
		tr[p].rev ^= <span class="hljs-number">1</span>;
		<span class="hljs-keyword">return</span> ;
	&#125;
	<span class="hljs-built_in">pushdown</span>(p);
	ll mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="hljs-number">1</span>;
	<span class="hljs-keyword">if</span> (l &lt;= mid) <span class="hljs-built_in">reverse</span>(lc, l, r);
	<span class="hljs-keyword">if</span> (r &gt; mid) <span class="hljs-built_in">reverse</span>(rc, l, r);
	<span class="hljs-built_in">pushup</span>(p);
&#125;

<span class="hljs-function">ll <span class="hljs-title">qsum</span><span class="hljs-params">(ll p, ll l, ll r)</span>
</span>&#123;
	<span class="hljs-keyword">if</span> (l &lt;= tr[p].l &amp;&amp; tr[p].r &lt;= r)
	&#123;
		<span class="hljs-keyword">return</span> tr[p].s1;
	&#125;
	<span class="hljs-built_in">pushdown</span>(p);
	ll mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="hljs-number">1</span>, tmp = <span class="hljs-number">0</span>;
	<span class="hljs-keyword">if</span> (l &lt;= mid) tmp += <span class="hljs-built_in">qsum</span>(lc, l, r);
	<span class="hljs-keyword">if</span> (r &gt; mid) tmp += <span class="hljs-built_in">qsum</span>(rc, l, r);
	<span class="hljs-keyword">return</span> tmp;
&#125;

<span class="hljs-function">Q <span class="hljs-title">merge</span><span class="hljs-params">(Q x, Q y)</span>
</span>&#123;
	Q as; as.l = x.l; as.r = y.r;
	as.l1 = <span class="hljs-built_in">max</span>(&#123;x.l1, y.l1, x.sf1 + y.p1&#125;);
	as.p1 = (x.p1 == (x.r - x.l + <span class="hljs-number">1</span>)) ? x.p1 + y.p1 : x.p1;
	as.sf1 = (y.sf1 == (y.r - y.l + <span class="hljs-number">1</span>)) ? y.sf1 + x.sf1 : y.sf1;
	<span class="hljs-keyword">return</span> as;
&#125;

<span class="hljs-function">Q <span class="hljs-title">ql</span><span class="hljs-params">(ll p, ll l, ll r)</span>
</span>&#123;
	<span class="hljs-keyword">if</span> (l &lt;= tr[p].l &amp;&amp; tr[p].r &lt;= r)
	&#123;
		<span class="hljs-keyword">return</span> &#123;tr[p].l, tr[p].r, tr[p].l1, tr[p].p1, tr[p].sf1&#125;;
	&#125;
	<span class="hljs-built_in">pushdown</span>(p);
	ll mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="hljs-number">1</span>;
	Q tmp; tmp.l = <span class="hljs-number">-1</span>;
	<span class="hljs-keyword">if</span> (l &lt;= mid) tmp = <span class="hljs-built_in">ql</span>(lc, l, r);
	<span class="hljs-keyword">if</span> (r &gt; mid) tmp = (tmp.l == <span class="hljs-number">-1</span>) ? <span class="hljs-built_in">ql</span>(rc, l, r) : <span class="hljs-built_in">merge</span>(tmp, <span class="hljs-built_in">ql</span>(rc, l, r));
	<span class="hljs-keyword">return</span> tmp;
&#125;

<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solv</span><span class="hljs-params">()</span>
</span>&#123;
	n = rd, m = rd;
	<span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n) a[i] = rd;
	<span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>);
	<span class="hljs-keyword">while</span> (m --)
	&#123;
		ll opt = rd, l = rd + <span class="hljs-number">1</span>, r = rd + <span class="hljs-number">1</span>;
		<span class="hljs-keyword">if</span> (opt == <span class="hljs-number">0</span>) <span class="hljs-built_in">assign</span>(<span class="hljs-number">1</span>, l, r, <span class="hljs-number">0</span>);
		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (opt == <span class="hljs-number">1</span>) <span class="hljs-built_in">assign</span>(<span class="hljs-number">1</span>, l, r, <span class="hljs-number">1</span>);
		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (opt == <span class="hljs-number">2</span>) <span class="hljs-built_in">reverse</span>(<span class="hljs-number">1</span>, l, r);
		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (opt == <span class="hljs-number">3</span>) <span class="hljs-built_in">writeln</span>(<span class="hljs-built_in">qsum</span>(<span class="hljs-number">1</span>, l, r));
		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (opt == <span class="hljs-number">4</span>) <span class="hljs-built_in">writeln</span>(<span class="hljs-built_in">ql</span>(<span class="hljs-number">1</span>, l, r).l1);
	&#125;
&#125;

<span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>
</span>&#123;
<span class="hljs-comment">//	freopen(&quot;.in&quot;, &quot;r&quot;, stdin);</span>
<span class="hljs-comment">//	freopen(&quot;.out&quot;, &quot;w&quot;, stdout);</span>
	ll TC = <span class="hljs-number">1</span>;
	<span class="hljs-keyword">while</span> (TC --) <span class="hljs-built_in">solv</span>();
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;
</code></pre>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
  <entry>
    <title>ai学习资源</title>
    <url>/2025/01/18/ai%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<h1 id="基础知识"><a class="markdownIt-Anchor" href="#基础知识"></a> 基础知识</h1>
<p>数学基础</p>
<ol>
<li><a href="https://zhuanlan.zhihu.com/p/36311622">高等数学</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/36584206">线性代数</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/36584335">概率论与数理统计</a></li>
</ol>
]]></content>
      <categories>
        <category>算法理论</category>
      </categories>
  </entry>
  <entry>
    <title>P8818 [CSP-S 2022] 策略游戏</title>
    <url>/2024/11/10/P8818%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p8818"><a class="markdownIt-Anchor" href="#p8818"></a> P8818</h1>
<p><a href="https://www.luogu.com.cn/problem/P8818">题目传送门</a></p>
<p>这题乍一看像是博弈论，实际上就是个简单的ST表的题。</p>
<p>很明显矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">C_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>啥用也没有，扔掉不管。</p>
<p>接下来考虑小L和小Q。首先肯定是考虑小Q，因为小Q后选，不需要考虑小L，只需要根据小L的选择做出选择即可。</p>
<p>假设小L此时选的数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>，则小Q此时有如下选择：</p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x &gt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时，选择<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>中的最小值。</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x &lt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时，选择<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>中的最大值。</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时，选什么都为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，于是将其并入第一种情况。</li>
</ul>
<p>接下来考虑小L的选择。实际上小L的选择只有非负数的最大最小和负数的最大最小四个数，可以证明此时选择其他数必然不优于这四个数。</p>
<p>还可以分类讨论得到同样的结果：</p>
<ul>
<li>当尝试使<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x \ge 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时，若小Q可选择负数，则小L应选择非负数里的最小值；若小Q不可选择负数，则小L应选择最大值。</li>
<li>当尝试使<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>≤</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x \le 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时，若小Q可选择正数，则小L应选择负数内的最大值；若小Q不可选择正数，则小L应选择最小值。</li>
</ul>
<p>所以此时就变成了静态RMQ问题，建6个ST表，分别存放：</p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>的最大值</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>的最小值</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>的非负最小值</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>的负最大值</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>的最大值</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>的最小值</li>
</ul>
<p>当然前两个换成非负最大和负数最小也可。</p>
<p>AC代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXINF LONG_LONG_MAX</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MININF LONG_LONG_MIN</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i, a, b) for (int i = a; i &lt;= b; ++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> drep(i, a, b) for (int i = a; i &gt;= b; --i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pln putchar(<span class="hljs-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> psp putchar(<span class="hljs-string">&#x27; &#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rd read()</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">bool</span> f = <span class="hljs-number">0</span>; <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>	<span class="hljs-keyword">for</span> (; ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>()) <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">for</span> (; ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>()) x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>;<br>	<span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">static</span> <span class="hljs-type">int</span> stkk[<span class="hljs-number">43</span>], tpp = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>	<span class="hljs-keyword">do</span><br>	&#123;<br>		stkk[++tpp] = x % <span class="hljs-number">10</span>;<br>		x /= <span class="hljs-number">10</span>;<br>	&#125; <span class="hljs-keyword">while</span> (x);<br>	<span class="hljs-keyword">while</span> (tpp) <span class="hljs-built_in">putchar</span>(stkk[tpp --] + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 100005</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> len (long long)(log2(r - l + 1))</span><br><br><span class="hljs-type">int</span> n, m, q, a[N], b[N];<br><span class="hljs-type">int</span> l1, r1, l2, r2;<br><span class="hljs-type">int</span> bmi[N][<span class="hljs-number">43</span>], ami[N][<span class="hljs-number">43</span>], nami[N][<span class="hljs-number">43</span>];<br><span class="hljs-type">int</span> bma[N][<span class="hljs-number">43</span>], ama[N][<span class="hljs-number">43</span>], nama[N][<span class="hljs-number">43</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">stinit</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, m)<br>		bmi[i][<span class="hljs-number">0</span>] = bma[i][<span class="hljs-number">0</span>] = b[i];<br>	<span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n)<br>	&#123;<br>		ami[i][<span class="hljs-number">0</span>] = ama[i][<span class="hljs-number">0</span>] = nami[i][<span class="hljs-number">0</span>] = nama[i][<span class="hljs-number">0</span>] = a[i];<br>		<span class="hljs-keyword">if</span> (a[i] &gt;= <span class="hljs-number">0</span>) nama[i][<span class="hljs-number">0</span>] = MININF;<br>		<span class="hljs-keyword">else</span> nami[i][<span class="hljs-number">0</span>] = MAXINF;<br>	&#125;<br>	<span class="hljs-built_in">rep</span>(j, <span class="hljs-number">1</span>, <span class="hljs-number">25</span>)<br>	&#123;<br>		<span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, m - (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>)) + <span class="hljs-number">1</span>)<br>		&#123;<br>			bmi[i][j] = <span class="hljs-built_in">min</span>(bmi[i][j<span class="hljs-number">-1</span>], bmi[i+(<span class="hljs-number">1</span>&lt;&lt;(j<span class="hljs-number">-1</span>))][j<span class="hljs-number">-1</span>]);<br>			bma[i][j] = <span class="hljs-built_in">max</span>(bma[i][j<span class="hljs-number">-1</span>], bma[i+(<span class="hljs-number">1</span>&lt;&lt;(j<span class="hljs-number">-1</span>))][j<span class="hljs-number">-1</span>]);<br>		&#125;<br>		<span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n - (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>)) + <span class="hljs-number">1</span>)<br>		&#123;<br>			ami[i][j] = <span class="hljs-built_in">min</span>(ami[i][j<span class="hljs-number">-1</span>], ami[i+(<span class="hljs-number">1</span>&lt;&lt;(j<span class="hljs-number">-1</span>))][j<span class="hljs-number">-1</span>]);<br>			nami[i][j] = <span class="hljs-built_in">min</span>(nami[i][j<span class="hljs-number">-1</span>], nami[i+(<span class="hljs-number">1</span>&lt;&lt;(j<span class="hljs-number">-1</span>))][j<span class="hljs-number">-1</span>]);<br>			ama[i][j] = <span class="hljs-built_in">max</span>(ama[i][j<span class="hljs-number">-1</span>], ama[i+(<span class="hljs-number">1</span>&lt;&lt;(j<span class="hljs-number">-1</span>))][j<span class="hljs-number">-1</span>]);<br>			nama[i][j] = <span class="hljs-built_in">max</span>(nama[i][j<span class="hljs-number">-1</span>], nama[i+(<span class="hljs-number">1</span>&lt;&lt;(j<span class="hljs-number">-1</span>))][j<span class="hljs-number">-1</span>]);<br>		&#125;<br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qami</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(ami[l][len], ami[r-(<span class="hljs-number">1</span>&lt;&lt;len)<span class="hljs-number">+1</span>][len]); &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qama</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(ama[l][len], ama[r-(<span class="hljs-number">1</span>&lt;&lt;len)<span class="hljs-number">+1</span>][len]); &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qbmi</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(bmi[l][len], bmi[r-(<span class="hljs-number">1</span>&lt;&lt;len)<span class="hljs-number">+1</span>][len]); &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qbma</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(bma[l][len], bma[r-(<span class="hljs-number">1</span>&lt;&lt;len)<span class="hljs-number">+1</span>][len]); &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qnami</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(nami[l][len], nami[r-(<span class="hljs-number">1</span>&lt;&lt;len)<span class="hljs-number">+1</span>][len]); &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qnama</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(nama[l][len], nama[r-(<span class="hljs-number">1</span>&lt;&lt;len)<span class="hljs-number">+1</span>][len]); &#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	n = rd, m = rd, q = rd;<br>	<span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n) a[i] = rd;<br>	<span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, m) b[i] = rd;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123; <span class="hljs-keyword">return</span> val * (val &gt;= <span class="hljs-number">0</span> ? <span class="hljs-built_in">qbmi</span>(l2, r2) : <span class="hljs-built_in">qbma</span>(l2, r2)); &#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solv</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">stinit</span>();<br>	<span class="hljs-keyword">while</span> (q --)<br>	&#123;<br>		l1 = rd, r1 = rd, l2 = rd, r2 = rd;<br>		<span class="hljs-type">int</span> ans = <span class="hljs-built_in">query</span>(<span class="hljs-built_in">qama</span>(l1, r1));<br>		ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">query</span>(<span class="hljs-built_in">qami</span>(l1, r1)));<br>		<span class="hljs-comment">// 这里要注意存在最值才可以更新，否则会WA</span><br>		<span class="hljs-keyword">if</span> (<span class="hljs-built_in">query</span>(<span class="hljs-built_in">qnama</span>(l1, r1) != MININF))<br>			ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">query</span>(<span class="hljs-built_in">qnama</span>(l1, r1)));<br>		<span class="hljs-keyword">if</span> (<span class="hljs-built_in">query</span>(<span class="hljs-built_in">qnami</span>(l1, r1) != MAXINF))<br>			ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">query</span>(<span class="hljs-built_in">qnami</span>(l1, r1)));<br>		<span class="hljs-built_in">write</span>(ans); pln;<br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//	freopen(&quot;.in&quot;, &quot;r&quot;, stdin);</span><br><span class="hljs-comment">//	freopen(&quot;.out&quot;, &quot;w&quot;, stdout);</span><br><span class="hljs-comment">//	ios::sync_with_stdio(false);</span><br><span class="hljs-comment">//	cin.tie(0), cout.tie(0);</span><br>	<span class="hljs-built_in">init</span>();<br>	<span class="hljs-built_in">solv</span>();<br><span class="hljs-comment">//	fclose(stdin);</span><br><span class="hljs-comment">//	fclose(stdout);</span><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建hexo+fluid个人博客</title>
    <url>/2025/01/17/hexo-fluid%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="搭建个人博客"><a class="markdownIt-Anchor" href="#搭建个人博客"></a> 搭建个人博客</h1>
<p>在日常学习中，搭建一个博客来记录学习历程，也算是一个比较高效的学习方法。这里列出本人搭建博客时的步骤，遇到的困难及解决方法等。</p>
<h2 id="前置"><a class="markdownIt-Anchor" href="#前置"></a> 前置</h2>
<ol>
<li>github仓库，可命名为 <a href="http://username.github.io">username.github.io</a></li>
<li>安装git</li>
<li>安装nodejs</li>
<li>安装hexo<br />
安装命令 <code>npm install hexo -g</code></li>
<li>安装hexo依赖<br />
安装命令 <code>npm install --save hexo-deployer-git</code></li>
</ol>
<h2 id="配置ssh"><a class="markdownIt-Anchor" href="#配置ssh"></a> 配置ssh</h2>
<p>配置ssh可以让deploy的时候不用每次都输入账号密码</p>
<p>步骤如下：</p>
<ol>
<li>
<p>生成ssh</p>
<p><code>ssh-keygen -t rsa -C &quot;邮件地址&quot;</code></p>
<p>询问不填直接回车，然后在用户文件夹下生成了ssh的pub。</p>
</li>
<li>
<p>配置</p>
<p>将pub中的文件复制到github上的ssh公钥里即可</p>
<p>git设置账号邮箱：</p>
 <figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;username&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;username@email.com&quot;</span><br></code></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="搭建博客"><a class="markdownIt-Anchor" href="#搭建博客"></a> 搭建博客</h2>
<p>先整一个文件夹，用来存放博客，建议存为username</p>
<p>进入文件夹，然后在cmd输入<code>hexo init</code>即可初始化</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><code class="hljs verilog">hexo clean # 清空本地缓存<br>hexo <span class="hljs-keyword">generate</span> # 缩写为hexo g，生成静态网页<br>hexo server # 缩写为hexo s，本地预览，localhost:<span class="hljs-number">4000</span><br></code></pre></td></tr></table></figure>
<h2 id="部署博客"><a class="markdownIt-Anchor" href="#部署博客"></a> 部署博客</h2>
<p>在_config.yml中添加以下内容：</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><code class="hljs nix"><span class="hljs-params">deploy:</span><br>  <span class="hljs-params">type:</span> git<br>  <span class="hljs-params">repository:</span> git@github.com:liyunchen<span class="hljs-symbol">/liyunchen.github.io.git</span><br>  <span class="hljs-params">branch:</span> main<br></code></pre></td></tr></table></figure>
<p>然后用<code>hexo deploy</code>即可部署到github</p>
<p>部署完毕即可用username.github.io访问了。</p>
]]></content>
      <categories>
        <category>科技工程</category>
      </categories>
  </entry>
  <entry>
    <title>假期规划高二上</title>
    <url>/2025/01/18/%E5%81%87%E6%9C%9F%E8%A7%84%E5%88%92%E9%AB%98%E4%BA%8C%E4%B8%8A/</url>
    <content><![CDATA[<h1 id="假期规划"><a class="markdownIt-Anchor" href="#假期规划"></a> 假期规划</h1>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2025.01.23</mn><mo>→</mo><mn>2025.02.13</mn></mrow><annotation encoding="application/x-tex">2025.01.23 \rightarrow 2025.02.13</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">2</span><span class="mord">5</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span><span class="mord">.</span><span class="mord">2</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">2</span><span class="mord">5</span><span class="mord">.</span><span class="mord">0</span><span class="mord">2</span><span class="mord">.</span><span class="mord">1</span><span class="mord">3</span></span></span></span></p>
<p>各科成绩开奖中…</p>
<table>
<thead>
<tr>
<th>科目</th>
<th>成绩</th>
</tr>
</thead>
<tbody>
<tr>
<td>语文</td>
<td>?</td>
</tr>
<tr>
<td>数学</td>
<td>?</td>
</tr>
<tr>
<td>英语</td>
<td>?</td>
</tr>
<tr>
<td>物理</td>
<td>?</td>
</tr>
<tr>
<td>化学</td>
<td>?</td>
</tr>
<tr>
<td>生物</td>
<td>?</td>
</tr>
</tbody>
</table>
<p>截至至<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2025.1.18</mn></mrow><annotation encoding="application/x-tex">2025.1.18</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">2</span><span class="mord">5</span><span class="mord">.</span><span class="mord">1</span><span class="mord">.</span><span class="mord">1</span><span class="mord">8</span></span></span></span>对完答案，目前的弱科当属语文英语生物。</p>
<p>首先是辅导班的安排。假期会有语文数学的辅导班，语文时间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>正月初十</mtext><mo>→</mo><mtext>正月十二</mtext></mrow><annotation encoding="application/x-tex">正月初十\rightarrow 正月十二</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">正</span><span class="mord cjk_fallback">月</span><span class="mord cjk_fallback">初</span><span class="mord cjk_fallback">十</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">正</span><span class="mord cjk_fallback">月</span><span class="mord cjk_fallback">十</span><span class="mord cjk_fallback">二</span></span></span></span>。原先虽然还有个辅导机构联系我来但是还是纯当乐子肯定是不去的。</p>
<p>接下来是个人的一些初步计划和安排</p>
<p>作业啥的肯定得完成</p>
<p>该有的复习预习也肯定得有</p>
<p>可以整生物的题和英语七选五语法填空做一做</p>
<p>拓展的话主要考虑做一些数学高考题，涉及一些竞赛的平面解析几何以及线性代数之类的</p>
<p>最后闲的没事打打cf，涨涨rating，虽然以及AFO，但是也可以做题嘛。</p>
]]></content>
  </entry>
  <entry>
    <title>收藏夹</title>
    <url>/2025/01/18/%E6%94%B6%E8%97%8F%E5%A4%B9/</url>
    <content><![CDATA[<p><a href="https://www.luogu.com.cn/article/1gxob6zc">latex公式大全</a></p>
<p><a href="https://www.luogu.com/article/4itopa7r">vscode配置</a></p>
<p><a href="https://vscch.guyutongxue.site/">配置器</a></p>
]]></content>
  </entry>
  <entry>
    <title>模板</title>
    <url>/2025/01/11/%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;ll, ll&gt; pll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">double</span> dd;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IOS cin.tie(nullptr), cout.tie(nullptr)-&gt;sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i, a, b) for (ll i = (a); i &lt;= (b); i ++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> per(i, a, b) for (ll i = (a); i &gt;= (b); i --)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mset(x, v) memset(x, v, sizeof x)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rd read<span class="hljs-string">&lt;ll&gt;</span>()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RAND() mt19937 Rand(time(0))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> gr(l, r) (Rand() % (r - l + 1) + l)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SZ(x) ((ll)x.size())</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Max</span><span class="hljs-params">(T &amp;x, T y)</span> </span>&#123; <span class="hljs-keyword">if</span> (y &gt; x) x = y; &#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Min</span><span class="hljs-params">(T &amp;x, T y)</span> </span>&#123; <span class="hljs-keyword">if</span> (y &lt; x) x = y; &#125;<br><br><span class="hljs-keyword">namespace</span> FastIO<br>&#123;<br>	<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function">T <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-type">bool</span> fl = <span class="hljs-number">0</span>; T x = <span class="hljs-number">0</span>; <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>		<span class="hljs-keyword">for</span> (; ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>()) <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) fl = <span class="hljs-number">1</span>;<br>		<span class="hljs-keyword">for</span> (; ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>()) x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>;<br>		<span class="hljs-keyword">return</span> fl ? -x : x;<br>	&#125;<br>	<br>	<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>		<span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">9</span>) <span class="hljs-built_in">write</span>(x / <span class="hljs-number">10</span>);<br>		<span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>	&#125;<br>	<br>	<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">writecs</span><span class="hljs-params">(T x)</span> </span>&#123; <span class="hljs-built_in">write</span>(x); <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>); &#125;<br>	<span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">writeln</span><span class="hljs-params">(T x)</span> </span>&#123; <span class="hljs-built_in">write</span>(x); <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>); &#125;<br>&#125;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> FastIO;<br><br><span class="hljs-comment">/*-----------------------main-----------------------*/</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solv</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//	freopen(&quot;.in&quot;, &quot;r&quot;, stdin);</span><br><span class="hljs-comment">//	freopen(&quot;.out&quot;, &quot;w&quot;, stdout);</span><br>	<span class="hljs-type">int</span> TC = <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">while</span> (TC --) <span class="hljs-built_in">solv</span>();<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>sublime text配置</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><code class="hljs nix">&#123;<br>  <span class="hljs-string">&quot;windows&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;cmd&quot;</span>: [<span class="hljs-string">&quot;g++&quot;</span>, <span class="hljs-string">&quot;-std=c++14&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;file&#125;</span>&quot;</span>, <span class="hljs-string">&quot;-o&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;file_base_name&#125;</span>.exe&quot;</span>],<br>  &#125;,<br>  <span class="hljs-string">&quot;cmd&quot;</span>: [<span class="hljs-string">&quot;g++&quot;</span>, <span class="hljs-string">&quot;-std=c++11&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;file&#125;</span>&quot;</span>, <span class="hljs-string">&quot;-o&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;file_base_name&#125;</span>&quot;</span>],<br>  <span class="hljs-string">&quot;file_regex&quot;</span>: <span class="hljs-string">&quot;^(.*)<span class="hljs-char escape_">\\</span>(([0-9]+),([0-9]+)<span class="hljs-char escape_">\\</span>) (Error|Fatal): (.*)$&quot;</span>,<br>  <span class="hljs-string">&quot;working_dir&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;file_path&#125;</span>&quot;</span>,<br>  <span class="hljs-string">&quot;selector&quot;</span>: <span class="hljs-string">&quot;source.c++&quot;</span>,<br>  <span class="hljs-string">&quot;variants&quot;</span>: [<br>  &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Run&quot;</span>,<br>      <span class="hljs-string">&quot;shell&quot;</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-string">&quot;windows&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;shell_cmd&quot;</span> : <span class="hljs-string">&quot;start cmd /c <span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-subst">$&#123;file_base_name&#125;</span>.exe<span class="hljs-char escape_">\&quot;</span> &amp; echo. &amp; pause<span class="hljs-char escape_">\&quot;</span>&quot;</span><br>      &#125;<br>  &#125;,<br>  &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Build and Run&quot;</span>,<br>      <span class="hljs-string">&quot;shell&quot;</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-string">&quot;windows&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;shell_cmd&quot;</span>: <span class="hljs-string">&quot;g++ -std=c++14 <span class="hljs-char escape_">\&quot;</span><span class="hljs-subst">$&#123;file&#125;</span><span class="hljs-char escape_">\&quot;</span> -o <span class="hljs-char escape_">\&quot;</span><span class="hljs-subst">$&#123;file_base_name&#125;</span>.exe<span class="hljs-char escape_">\&quot;</span> -O2 -static -Wl,--stack=2147000000 &amp;&amp; start cmd /c <span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\&quot;</span><span class="hljs-subst">$&#123;file_base_name&#125;</span>.exe<span class="hljs-char escape_">\&quot;</span> &amp; echo. &amp; pause<span class="hljs-char escape_">\&quot;</span>&quot;</span><br>      &#125;,<br>  &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>科技工程</category>
      </categories>
  </entry>
  <entry>
    <title>zkw线段树学习笔记</title>
    <url>/2025/01/24/zkw%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1>zkw线段树</h1>
<h2 id="前置芝士">前置芝士</h2>
<p>基本了解<a href="https://oi-wiki.org/ds/seg/">线段树</a>。</p>
<p>关于zkw线段树，<a href="https://www.luogu.com/article/sr9hp0dw">这篇文章</a>讲得已经很详细了。</p>
<p>zkw线段树，也称重口味线段树或非递归线段树，是清华大学的张昆玮于《统计的力量》中发表的一种线段树的实现方式。zkw线段树的时间复杂度并没有降低，但是因为不进行递归，所以具有优秀的常数和代码长度，正常线段树能实现的功能基本都能实现。</p>
<h2 id="原理">原理</h2>
<p>普通的线段树是线段树将每个长度不为 1 的区间划分成左右两个区间递归求解，把整个线段划分为一个树形结构，通过合并左右两区间信息来求得该区间的信息。</p>
<p>但是线段树的实现因为需要递归所以会产生巨大常数（这也导致了笔者在noip的一场模拟赛被卡常）。</p>
<p><strong>那么zkw线段树是怎么实现的呢？</strong></p>
<p><em>ps:本文章中的所有线段树均使用区间求和线段树作为例子</em></p>
<p>我们注意到当区间长度是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>时，整棵树是一棵满二叉树，每一个叶子节点所占据的位置可以表示为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>+</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">N+i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span></p>
<p>那当区间长度不满足上述条件呢？</p>
<p>很减丹，只需要补成满二叉树即可。</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/m19c6bsp.png" alt=""></p>
<p>如图，储存信息的叶子节点编号分别是9到13。zkw线段树至少有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">N+2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span>个叶子节点，其中有两个虚点用来辅助，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>个储存信息，于是叶子节点编号即可表示为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo>+</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">P+i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>，如此也就避免了线段树递归找叶子节点的过程。</p>
<p>所以 zkw 线段树就直接建出一棵满二叉树，原序列信息都维护在最底层。严格规定父子节点关系，同层节点的子树大小相等。<br>
这样每个叶子节点都可以直接找到并修改，由于二叉树父子节点的二进制关系，就可以递推直接找到对应节点的父亲节点自下而上地维护节点关系。</p>
<h2 id="实现">实现</h2>
<h3 id="建树">建树</h3>
<p>那么建树过程也十分简单。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	cin &gt;&gt; n;<br>	<span class="hljs-keyword">for</span> (P = <span class="hljs-number">1</span>; P &lt;= N + <span class="hljs-number">1</span>; P &lt;&lt;= <span class="hljs-number">1</span>); <span class="hljs-comment">// 求出虚点</span><br>	<span class="hljs-keyword">for</span> (ll i = <span class="hljs-number">1</span>; i &lt;= n; i ++) cin &gt;&gt; tr[i + P]; <span class="hljs-comment">// 读入数据</span><br>	<span class="hljs-keyword">for</span> (ll i = N - <span class="hljs-number">1</span>; i; i --) tr[i] = tr[i&lt;&lt;<span class="hljs-number">1</span>] + tr[i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]; <span class="hljs-comment">// 更新叶子节点</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="单点修改。">单点修改。</h3>
<p>和递归版一样，找到叶子节点然后一路向上就可以。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(ll x, ll d)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (x += P; x; x &gt;&gt;= <span class="hljs-number">1</span>) tr[x] += d;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>！</strong></p>
<p>这么简单？</p>
<p>是的就是这么简单，这就是非递归版本的优势。</p>
<p>单点查询也只需查询编号为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo>+</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">P+i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>的叶子节点的信息即可。</p>
<h3 id="区间查询">区间查询</h3>
<p>区间查询的时候直接找的话会发现这个过程及其麻烦，于是想其他的方法。</p>
<p>我们将要查询的区间分别向左右扩展一个节点，形成两个哨兵节点，利用这两个哨兵节点不断向上跳父亲，即可完成查询。</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/prbse4cv.png" alt=""></p>
<p>那么具体该如何实现呢？</p>
<ol>
<li>如果左哨兵是左孩子，那么答案加上右孩子的贡献。</li>
<li>如果右哨兵是右孩子，那么答案加上左孩子的贡献。</li>
</ol>
<p>如果不理解可以对着图自己多模拟几遍就可以了。</p>
<p>代码实现如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">query</span><span class="hljs-params">(ll l, ll r)</span></span><br><span class="hljs-function"></span>&#123;<br>	ll ans = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span> (l += P - <span class="hljs-number">1</span>, r += P + <span class="hljs-number">1</span>; r ^ l ^ <span class="hljs-number">1</span>; r &gt;&gt;= <span class="hljs-number">1</span>, l &gt;&gt;= <span class="hljs-number">1</span>)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (~l &amp; <span class="hljs-number">1</span>) ans += tree[l ^ <span class="hljs-number">1</span>];<br>		<span class="hljs-keyword">if</span> (r &amp; <span class="hljs-number">1</span>) ans += tree[r ^ <span class="hljs-number">1</span>];<br>	&#125;<br>	<span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="区间修改">区间修改</h3>
<p>区间修改的基本原理也和区间查询类似，也是寻找哨兵节点，然后不断向上跳父亲进行修改。</p>
<p>但是这里遇到了一个问题，因为zkw不像递归版本是自上往下找叶子节点，在路上就更新，所以打懒标记的时候就需要一个技巧：标记永久化。顾名思义，就是打的lazytag不进行pushdown，直接就留在原地。</p>
<p>上代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update_add</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, ll k)</span> </span>&#123;<br>	l=P+l<span class="hljs-number">-1</span>;<br>	r=P+r<span class="hljs-number">+1</span>;<span class="hljs-comment">//哨兵位置</span><br>	<span class="hljs-type">int</span> siz = <span class="hljs-number">1</span>;<span class="hljs-comment">//记录当前子树大小</span><br><br>	<span class="hljs-keyword">while</span>(l^<span class="hljs-number">1</span>^r) &#123; <span class="hljs-comment">//当l与r互为兄弟时，只有最后一位不同</span><br>		<span class="hljs-keyword">if</span>(~l&amp;<span class="hljs-number">1</span>) tr[l^<span class="hljs-number">1</span>]+=siz*k,sum[l^<span class="hljs-number">1</span>]+=k;<br>		<span class="hljs-keyword">if</span>(r&amp;<span class="hljs-number">1</span>) tr[r^<span class="hljs-number">1</span>]+=siz*k,sum[r^<span class="hljs-number">1</span>]+=k;<br>		<span class="hljs-comment">//类似递归线段树 tr[p] += tag[p]*(r-l+1)</span><br>		l&gt;&gt;=<span class="hljs-number">1</span>;<br>		r&gt;&gt;=<span class="hljs-number">1</span>;<br>		siz&lt;&lt;=<span class="hljs-number">1</span>;<br>		<span class="hljs-comment">//每次向上走时子树大小都会增加一倍</span><br>		tr[l] = tr[l&lt;&lt;<span class="hljs-number">1</span>]+tr[l&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+sum[l]*siz;<span class="hljs-comment">//维护父子关系</span><br>		tr[r] = tr[r&lt;&lt;<span class="hljs-number">1</span>]+tr[r&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+sum[r]*siz;<br>	&#125;<br>	<span class="hljs-keyword">for</span>(l&gt;&gt;=<span class="hljs-number">1</span>,siz&lt;&lt;=<span class="hljs-number">1</span>; l; l&gt;&gt;=<span class="hljs-number">1</span>,siz&lt;&lt;=<span class="hljs-number">1</span>) tr[l] = tr[l&lt;&lt;<span class="hljs-number">1</span>]+tr[l&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]+sum[l]*siz; <span class="hljs-comment">//更新上传至根节点</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>同时查询函数也要进行一些修改，和区间修改类似，加上lazytag的影响即可，此处不呈现代码。</p>
<h3 id="but">but</h3>
<p><strong>反转</strong></p>
<p>当处理多个信息有优先级的时候就没法合并了，那么zkw线段树就失效了吗？那么多人说的牛x的东西原来这么辣？</p>
<p>nonono</p>
<p>我们注意到如果一个叶子节点向上跳父亲，那么跳多少级就是右移多少位，那么就可以直接pushdown了。只需要找到最深多少，每一层深度多少，然后循环从上往下pushdown即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify_add</span><span class="hljs-params">(ll l, ll r, ll k)</span></span><br><span class="hljs-function"></span>&#123;<br>	l += P - <span class="hljs-number">1</span>, r += P + <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">for</span> (ll dep = DEP - <span class="hljs-number">1</span>; dep; dep --) &#123; <span class="hljs-built_in">pushdown</span>(l &gt;&gt; dep, <span class="hljs-number">1</span> &lt;&lt; dep); <span class="hljs-built_in">pushdown</span>(r &gt;&gt; dep, <span class="hljs-number">1</span> &lt;&lt; dep); &#125;<br>	ll siz = <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">for</span> (; l ^ r ^ <span class="hljs-number">1</span>; )<br>	&#123;<br>		<span class="hljs-keyword">if</span> (~l &amp; <span class="hljs-number">1</span>) tr[l^<span class="hljs-number">1</span>] += k * siz, sum[l^<span class="hljs-number">1</span>] += k;<br>		<span class="hljs-keyword">if</span> (r &amp; <span class="hljs-number">1</span>) tr[r^<span class="hljs-number">1</span>] += k * siz, sum[r^<span class="hljs-number">1</span>] += k;<br>		l &gt;&gt;= <span class="hljs-number">1</span>, r &gt;&gt;= <span class="hljs-number">1</span>, siz &lt;&lt;= <span class="hljs-number">1</span>;<br>		tr[l] = tr[l&lt;&lt;<span class="hljs-number">1</span>] + tr[l&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br>		tr[r] = tr[r&lt;&lt;<span class="hljs-number">1</span>] + tr[r&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br>	&#125;<br>	<span class="hljs-keyword">for</span> (l &gt;&gt;= <span class="hljs-number">1</span>; l; l &gt;&gt;= <span class="hljs-number">1</span>, r &gt;&gt;= <span class="hljs-number">1</span>)<br>		tr[l] = tr[l&lt;&lt;<span class="hljs-number">1</span>] + tr[l&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure>
<p>如此可以处理多个信息合并的问题了。同时区间查询的时候也只需采用最基本的查询方式只需要最前面加上pushdown即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(ll l, ll r)</span></span><br><span class="hljs-function"></span>&#123;<br>	l += P - <span class="hljs-number">1</span>, r += P + <span class="hljs-number">1</span>;<br>	ll ans = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span> (ll dep = DEP - <span class="hljs-number">1</span>; dep; dep --) &#123; <span class="hljs-built_in">pushdown</span>(l &gt;&gt; dep, <span class="hljs-number">1</span> &lt;&lt; dep); <span class="hljs-built_in">pushdown</span>(r &gt;&gt; dep, <span class="hljs-number">1</span> &lt;&lt; dep); &#125;<br>	<span class="hljs-keyword">for</span> (; l ^ r ^ <span class="hljs-number">1</span>; l &gt;&gt;= <span class="hljs-number">1</span>, r &gt;&gt;= <span class="hljs-number">1</span>)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (~l &amp; <span class="hljs-number">1</span>) ans += tr[l^<span class="hljs-number">1</span>];<br>		<span class="hljs-keyword">if</span> (r &amp; <span class="hljs-number">1</span>) ans += tr[r^<span class="hljs-number">1</span>];<br>	&#125;<br>	<span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>这就是zkw线段树的基本操作，代码短小精悍，常数又小，为何不来一试。</p>
]]></content>
      <categories>
        <category>算法理论</category>
      </categories>
  </entry>
  <entry>
    <title>DL学习笔记1-数学基础</title>
    <url>/2025/04/17/DL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01-%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="线性代数"><a class="markdownIt-Anchor" href="#线性代数"></a> 线性代数</h1>
<h2 id="矩阵运算"><a class="markdownIt-Anchor" href="#矩阵运算"></a> 矩阵运算</h2>
<p>转置：是矩阵的重要操作之一。矩阵的转置是以对角线为轴的镜像，这条从左上角到右下角的对角线被称为<strong>主对角线</strong>。</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><msup><mo stretchy="false">)</mo><mi mathvariant="normal">⊤</mi></msup><mo>=</mo><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">(A_{i,j})^{\top} = A_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.135216em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">⊤</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></p>
<p>矩阵相加是各个位置相加，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>=</mo><mi>B</mi><mo>+</mo><mi>C</mi><mo>⇒</mo><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><msub><mi>B</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>+</mo><msub><mi>C</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">A=B+C \Rightarrow A_{i,j} = B_{i,j}+C_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></p>
<p>矩阵乘法：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><mo>=</mo><mi>A</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">C=AB
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></span></p>
<p>具体地，该乘法操作定义为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>C</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><munder><mo>∑</mo><mi>k</mi></munder><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>k</mi></mrow></msub><mi>B</mi><mrow><mi>k</mi><mo separator="true">,</mo><mi>j</mi></mrow></mrow><annotation encoding="application/x-tex">C_{i,j}=\sum_k A_{i,k}B{k,j}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.3521180000000004em;vertical-align:-1.3021129999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000005em;"><span style="top:-1.847887em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3021129999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span></span></span></p>
<p>矩阵乘法服从分配律和结合律：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><mi>B</mi><mo>+</mo><mi>C</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mi>B</mi><mo>+</mo><mi>A</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">A(B+C) = AB + AC
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><mi>B</mi><mi>C</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><mo stretchy="false">)</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">A(BC) + (AB)C
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></span></p>
<p><strong>需要注意的是：矩阵乘法并不总是满足交换律</strong></p>
<p>矩阵转置：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><msup><mo stretchy="false">)</mo><mi mathvariant="normal">⊤</mi></msup><mo>=</mo><msup><mi>A</mi><mi mathvariant="normal">⊤</mi></msup><msup><mi>B</mi><mi mathvariant="normal">⊤</mi></msup></mrow><annotation encoding="application/x-tex">(AB)^{\top} = A^{\top}B^{\top}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">⊤</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8991079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">⊤</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">⊤</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<h2 id="单位矩阵和逆矩阵"><a class="markdownIt-Anchor" href="#单位矩阵和逆矩阵"></a> 单位矩阵和逆矩阵</h2>
<p><strong>单位矩阵：</strong> 任意向量和单位矩阵相乘，都不会改变。我们将保持<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>维向量不变的单位矩阵记作<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">I_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。<br />
单位矩阵的结构很简单，所有沿对角线的元素都是1，其余位置均为0。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}
    1&amp;0&amp;\cdots&amp;0&amp;0 \\
    0&amp;1&amp;\cdots&amp;0&amp;0 \\
    \vdots&amp;\vdots&amp;\ddots&amp;\vdots&amp;\vdots \\
    0&amp;0&amp;\cdots&amp;1&amp;0 \\
    0&amp;0&amp;\cdots&amp;0&amp;1 \\
\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.66em;vertical-align:-3.079999999999999em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.555985em;"><span style="top:-0.7499750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-1.8999750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.4959750000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.0919750000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.6879750000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.283975em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.314965000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.555985000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.050045em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.240000000000001em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-5.04em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-3.18em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-1.9800000000000009em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-0.7800000000000009em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.555985em;"><span style="top:-0.7499750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-1.8999750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.4959750000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.0919750000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.6879750000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.283975em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.314965000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.555985000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.050045em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>矩阵的<strong>矩阵逆</strong>记为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">A^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>，其定义的矩阵满足如下条件：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>A</mi><mo>=</mo><msub><mi>I</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">A^{-1}A=I_n
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.864108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>可以通过如下步骤求解：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mi>x</mi><mo>=</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">Ax=b
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>A</mi><mi>x</mi><mo>=</mo><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>b</mi></mrow><annotation encoding="application/x-tex">A^{-1}Ax=A^{-1}b
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.864108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">A</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.864108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">b</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mo>=</mo><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>b</mi></mrow><annotation encoding="application/x-tex">x=A^{-1}b
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.864108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">b</span></span></span></span></span></p>
<h2 id="线性相关和生成子空间"><a class="markdownIt-Anchor" href="#线性相关和生成子空间"></a> 线性相关和生成子空间</h2>
]]></content>
  </entry>
  <entry>
    <title>P5522题解</title>
    <url>/2025/04/19/P5522%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p5522-yloi2019-棠梨煎雪-题解"><a class="markdownIt-Anchor" href="#p5522-yloi2019-棠梨煎雪-题解"></a> P5522 [yLOI2019] 棠梨煎雪 题解</h1>
<p><a href="https://www.luogu.com.cn/problem/P5522">题目传送门</a></p>
<h2 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h2>
<p>给定<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span>个长度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>的字符串，规定字符只含<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mo stretchy="false">?</mo></mrow><annotation encoding="application/x-tex">0,1,?</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mclose">?</span></span></span></span>。</p>
<p>两种操作，第一种是单点修改，改变某个位置的字符串。</p>
<p>第二种操作是区间查询，查询有多少种字符串能够满足在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[l,r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span>区间内的所有字符串，对于每一个位置，如果是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mi mathvariant="normal">/</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">0/1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">/</span><span class="mord">1</span></span></span></span>那必须也为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mi mathvariant="normal">/</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">0/1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">/</span><span class="mord">1</span></span></span></span>，如果是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">?</mo></mrow><annotation encoding="application/x-tex">?</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mclose">?</span></span></span></span>则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mi mathvariant="normal">/</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">0/1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">/</span><span class="mord">1</span></span></span></span>均可。</p>
<p>将答案异或和异或0输出。</p>
<h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> solution</h2>
<p>感觉思路比较暴力，后续应该可以优化。</p>
<p>一眼线段树题，单点修改就直接递归到叶子节点upd，然后一路合并上去即可。</p>
<p>接下来考虑区间查询。</p>
<p>对于每一个位置，有三种情况：</p>
<ul>
<li>为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mi mathvariant="normal">/</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">0/1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">/</span><span class="mord">1</span></span></span></span>，有一种方案</li>
<li>为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">?</mo></mrow><annotation encoding="application/x-tex">?</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mclose">?</span></span></span></span>，有两种方案，填<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mi mathvariant="normal">/</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">0/1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">/</span><span class="mord">1</span></span></span></span>均可</li>
<li>无法填，0种方案，同时也表示此次查询为0</li>
</ul>
<p>每一个位置的方案数确定了之后，就可以利用分步计数乘法原理，将每一位的方案数乘起来即为答案。</p>
<p>那么关键点就在线段树节点维护的信息及合并上</p>
<p>左右端点肯定要维护<br />
对于每一位需要记录<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mi mathvariant="normal">/</mi><mn>1</mn><mi mathvariant="normal">/</mi><mo stretchy="false">?</mo></mrow><annotation encoding="application/x-tex">0/1/?</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">/</span><span class="mord">1</span><span class="mord">/</span><span class="mclose">?</span></span></span></span>，三种情况<br />
还需要记录到此节点的方案数</p>
<p>那么<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mi mathvariant="normal">/</mi><mn>1</mn><mi mathvariant="normal">/</mi><mo stretchy="false">?</mo></mrow><annotation encoding="application/x-tex">0/1/?</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">/</span><span class="mord">1</span><span class="mord">/</span><span class="mclose">?</span></span></span></span>该如何记录？</p>
<p>看到30的数据范围很自然想到二进制，但是二进制不能记录三个位置。这好办，再开一个二进制记录即可。一个记录是否为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">?</mo></mrow><annotation encoding="application/x-tex">?</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mclose">?</span></span></span></span>，另一个记录不为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">?</mo></mrow><annotation encoding="application/x-tex">?</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mclose">?</span></span></span></span>的情况下此位是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mi mathvariant="normal">/</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">0/1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">/</span><span class="mord">1</span></span></span></span></p>
<p>那么对于两个节点如何合并？</p>
<p>对于每一位考虑，算是分类讨论吧（假设左儿子为x，右儿子为y）：</p>
<ul>
<li>如果x此位为?并且y此位也为?，那么这一位记录?的二进制为1，此位方案数为2</li>
<li>如果x或y其中一个为?，另一个为0/1，那么此位记录?的二进制为0，记录0/1的二进制为非?的数</li>
<li>如果均不为?，只需判断x和y此位是否一样，如果一样，记录0/1的二进制为此位，否则此节点方案设为0</li>
</ul>
<p>然后写出了巨长无比的代码。然后<s>愉快</s>惊奇地发现TLE了0.02s两组，而且像下载都下载不了（文件巨大）。</p>
<p>这么点时间随便剪剪枝就过了吧。</p>
<p>把线段树换成zkw应该可以过，但是没试。我采用的方法是在向左右儿子递归查询的时候如果第一次查询无方案，那么不再进行第二次查询。事实证明这个方法跑得巨快无比，整整快了0.22s</p>
<h2 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h2>
<p>码风还算良好，前面的快读及自己常用配置就不贴了应该一读就读出来了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 100037</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> lc p&lt;&lt;1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rc p&lt;&lt;1|1</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>	ll l, r;<br>	ll cnt, a, b; <span class="hljs-comment">// a为记0/1，b为记是否是问号 </span><br>&#125; tr[N&lt;&lt;<span class="hljs-number">2</span>];<br><br>string str[N];<br>ll n, m, ans = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(ll p, string s)</span></span><br><span class="hljs-function"></span>&#123;<br>	tr[p].cnt = <span class="hljs-number">1</span>;<br>	tr[p].a = tr[p].b = <span class="hljs-number">0</span>;<br>	<span class="hljs-built_in">rep</span>(i, <span class="hljs-number">0</span>, (ll)s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;?&#x27;</span>) tr[p].b |= (<span class="hljs-number">1</span> &lt;&lt; i), tr[p].cnt &lt;&lt;= <span class="hljs-number">1</span>;<br>		<span class="hljs-keyword">else</span> tr[p].a |= ((s[i] - <span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; i);<br>	&#125;<br>&#125;<br><br><span class="hljs-function">node <span class="hljs-title">merge</span><span class="hljs-params">(node x, node y)</span></span><br><span class="hljs-function"></span>&#123;<br>	node t; t.l = <span class="hljs-built_in">min</span>(x.l, y.l); t.r = <span class="hljs-built_in">max</span>(x.r, y.r); t.cnt = <span class="hljs-number">1</span>; t.a = t.b = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">if</span> (!x.cnt || !y.cnt) &#123; t.cnt = <span class="hljs-number">0</span>; <span class="hljs-keyword">return</span> t; &#125;<br>	<span class="hljs-built_in">rep</span>(i, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>)<br>	&#123;<br>		ll tx = ((x.b &gt;&gt; i) &amp; <span class="hljs-number">1</span>), ty = ((y.b &gt;&gt; i) &amp; <span class="hljs-number">1</span>);<br>		<span class="hljs-keyword">if</span> (tx &amp;&amp; ty) t.b |= (<span class="hljs-number">1</span> &lt;&lt; i), t.cnt &lt;&lt;= <span class="hljs-number">1</span>;<br>		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tx &amp;&amp; !ty) t.a |= (y.a &amp; (<span class="hljs-number">1</span> &lt;&lt; i));<br>		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!tx &amp;&amp; ty) t.a |= (x.a &amp; (<span class="hljs-number">1</span> &lt;&lt; i));<br>		<span class="hljs-keyword">else</span><br>		&#123;<br>			<span class="hljs-keyword">if</span> ((x.a &amp; (<span class="hljs-number">1</span> &lt;&lt; i)) == (y.a &amp; (<span class="hljs-number">1</span> &lt;&lt; i))) t.a |= (x.a &amp; (<span class="hljs-number">1</span> &lt;&lt; i));<br>			<span class="hljs-keyword">else</span> t.cnt = <span class="hljs-number">0</span>;<br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">return</span> t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(ll l, ll r, ll p)</span></span><br><span class="hljs-function"></span>&#123;<br>	tr[p].l = l; tr[p].r = r;<br>	<span class="hljs-keyword">if</span> (l == r) &#123; <span class="hljs-built_in">upd</span>(p, str[l]); <span class="hljs-keyword">return</span> ; &#125;<br>	ll mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>	<span class="hljs-built_in">build</span>(l, mid, lc); <span class="hljs-built_in">build</span>(mid + <span class="hljs-number">1</span>, r, rc);<br>	tr[p] = <span class="hljs-built_in">merge</span>(tr[lc], tr[rc]);<br>&#125;<br><br><span class="hljs-function">node <span class="hljs-title">query</span><span class="hljs-params">(ll p, ll l, ll r)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (l &lt;= tr[p].l &amp;&amp; tr[p].r &lt;= r) <span class="hljs-keyword">return</span> tr[p];<br>	ll mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>	node tx, ty; <span class="hljs-type">bool</span> flx = <span class="hljs-number">0</span>, fly = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">if</span> (l &lt;= mid) &#123; tx = <span class="hljs-built_in">query</span>(lc, l, r), flx = <span class="hljs-number">1</span>; <span class="hljs-keyword">if</span> (tx.cnt == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> tx; &#125;<br>	<span class="hljs-keyword">if</span> (r &gt; mid) ty = <span class="hljs-built_in">query</span>(rc, l, r), fly = <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">if</span> (flx &amp;&amp; fly) <span class="hljs-keyword">return</span> <span class="hljs-built_in">merge</span>(tx, ty);<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (flx &amp;&amp; !fly) <span class="hljs-keyword">return</span> tx;<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!flx &amp;&amp; fly) <span class="hljs-keyword">return</span> ty;<br>	<span class="hljs-keyword">else</span> <span class="hljs-built_in">return</span> (node)&#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(ll p, ll x, string s)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (tr[p].l == tr[p].r) &#123; <span class="hljs-built_in">upd</span>(p, s); <span class="hljs-keyword">return</span> ; &#125;<br>	ll mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">if</span> (mid &gt;= x) <span class="hljs-built_in">update</span>(lc, x, s);<br>	<span class="hljs-keyword">else</span> <span class="hljs-built_in">update</span>(rc, x, s);<br>	tr[p] = <span class="hljs-built_in">merge</span>(tr[lc], tr[rc]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solv</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	n = rd, m = rd; ll Q = rd;<br>	<span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, m) cin &gt;&gt; str[i];<br>	<span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, m, <span class="hljs-number">1</span>);<br>	<span class="hljs-keyword">while</span> (Q --)<br>	&#123;<br>		ll opt = rd;<br>		<span class="hljs-keyword">if</span> (opt == <span class="hljs-number">0</span>)<br>		&#123;<br>			ll l = rd, r = rd;<br>			ans ^= <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, l, r).cnt;<br>		&#125;<br>		<span class="hljs-keyword">else</span><br>		&#123;<br>			ll pos = rd;<br>			string st;<br>			cin &gt;&gt; st;<br>			<span class="hljs-built_in">update</span>(<span class="hljs-number">1</span>, pos, st);<br>		&#125;<br>	&#125;<br>	<span class="hljs-built_in">writeln</span>(ans ^ <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
</search>
